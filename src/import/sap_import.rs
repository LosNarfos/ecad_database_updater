use std::{io::{BufReader, BufRead, Write}, fs::File};
use encoding_rs::WINDOWS_1252;
use encoding_rs_io::DecodeReaderBytesBuilder;
use serde::Deserialize;



#[derive(Clone, Deserialize, Debug, Default)]
pub struct PartFromSAP {
    #[serde(default, rename = "Default Stock Code")]
    pub default_stock_id: String,
    #[serde(default, rename = "SAP_MatNo_HTN")]
    pub sap_mat_no_htn: String,
    #[serde(default, rename = "SAP_PartNoManufacterer")]
    pub part_no_manufacturer: String,
    #[serde(default, rename = "SAP_Manufacterer")]
    pub manufacturer: String,
    #[serde(default, rename = "SAP_Plant")]
    pub plant: String,
    #[serde(default, rename = "SAP_Mat_status")]
    pub mat_status: String,
    #[serde(default, rename = "SAP_StandardMat")]
    pub standard_mat: String,
    #[serde(default, rename = "SAP_Labor")]
    pub labor: String,
    #[serde(default, rename = "SAP_Washable")]
    pub washable: String,
    #[serde(default, rename = "SAP_MatShortText")]
    pub mat_short_text: String,
    #[serde(default, rename = "SAP_SELCD")]
    pub selection_code: String,
    #[serde(default, rename = "SAP_MTTF_ISO")]
    pub mttf: String,
    #[serde(default, rename = "SAP_Device_Marking")]
    pub device_marking: String,
    #[serde(default, rename = "SAP_Price_Info")]
    pub price_info: String,
    #[serde(default, rename = "Stock_2100")]
    pub stock_2100: String,
    #[serde(default, rename = "Stock_2720")]
    pub stock_2720: String,
}


pub fn clean_up_csv_file_from_sap() -> Result<(), std::io::Error> {

    // Currently (march 2023) the SAP csv export is a mess ...
    //  - It's coded in ANSI WINDOWS_1252 / CP 1252
    //  - The data rows miss the last quotation mark (")
    // To fix this we do some cleanup first. Should this be fixed on SAP side we can delete this function.

     // first we create a new temporary csv file
    let mut output_file = File::create("SAP_Export\\Extract_SAP4Zuken_fixed.csv")?;

    // the we open the bugged csv file given by the SAP-Output-Job
    let file = File::open("SAP_Export\\Extract_SAP4Zuken.csv")?;

    // then we build a Decoder-Bytestream-reader from the rs_encoding crate to read in the SAP-file. This transforms the ANSI charset to UTF-8
    let transcoded = DecodeReaderBytesBuilder::new()
        .encoding(Some(WINDOWS_1252)) // WINDOWS_1252 codemap equals ANSI (at least for our purpose ...)
        .build(file); 
    let reader = BufReader::new(transcoded);

    // Finally we iterate through all lines and add the missing quotations marks add the end. The new file is then UTF-8 coded
    for(index, line) in reader.lines().enumerate() {
        output_file.write(line?.as_bytes())?;
        if index > 2 {
            output_file.write(b"\"")?;
        }
        output_file.write(b"\n")?;
    }
    Ok(())

}

pub fn read_sap_export() -> Result<Vec<PartFromSAP>, std::io::Error> {  

    // clean up buggy CSV file given by SAP
    clean_up_csv_file_from_sap()?;

    // read in csv file generated by SAP
    let path = "SAP_Export\\Extract_SAP4Zuken_fixed.csv";
    let file = File::open(path)?;
    println!("  Reading in SAP-CSV File: {}", path);

    // create reader from file and desirialize every row
    let mut parts: Vec<PartFromSAP> = Vec::new();
    let mut rdr = csv::Reader::from_reader(file);
    for (index, row) in rdr.deserialize().enumerate() {
        match row {
            Ok(row) => {
                parts.push(row);
            }
            Err(row) => println!("{}: {:?}", index + 2, row),
        }
    }
    Ok(parts)
}